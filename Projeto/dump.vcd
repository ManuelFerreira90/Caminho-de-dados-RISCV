$date
	Tue May 30 19:35:18 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module main $end
$scope module registradores $end
$var wire 32 ! aluresult2 [31:0] $end
$var wire 1 " clk $end
$var wire 5 # rd [4:0] $end
$var wire 32 $ reddataM [31:0] $end
$var wire 5 % rs1 [4:0] $end
$var wire 5 & rs2 [4:0] $end
$var wire 1 ' regiwrite $end
$var wire 1 ( memtoreg $end
$var reg 32 ) readdata1R [31:0] $end
$var reg 32 * readdata2R [31:0] $end
$var reg 32 + reg0 [31:0] $end
$var reg 32 , reg1 [31:0] $end
$var reg 32 - reg10 [31:0] $end
$var reg 32 . reg11 [31:0] $end
$var reg 32 / reg12 [31:0] $end
$var reg 32 0 reg13 [31:0] $end
$var reg 32 1 reg14 [31:0] $end
$var reg 32 2 reg15 [31:0] $end
$var reg 32 3 reg16 [31:0] $end
$var reg 32 4 reg17 [31:0] $end
$var reg 32 5 reg18 [31:0] $end
$var reg 32 6 reg19 [31:0] $end
$var reg 32 7 reg2 [31:0] $end
$var reg 32 8 reg20 [31:0] $end
$var reg 32 9 reg21 [31:0] $end
$var reg 32 : reg22 [31:0] $end
$var reg 32 ; reg23 [31:0] $end
$var reg 32 < reg24 [31:0] $end
$var reg 32 = reg25 [31:0] $end
$var reg 32 > reg26 [31:0] $end
$var reg 32 ? reg27 [31:0] $end
$var reg 32 @ reg28 [31:0] $end
$var reg 32 A reg29 [31:0] $end
$var reg 32 B reg3 [31:0] $end
$var reg 32 C reg30 [31:0] $end
$var reg 32 D reg31 [31:0] $end
$var reg 32 E reg4 [31:0] $end
$var reg 32 F reg5 [31:0] $end
$var reg 32 G reg6 [31:0] $end
$var reg 32 H reg7 [31:0] $end
$var reg 32 I reg8 [31:0] $end
$var reg 32 J reg9 [31:0] $end
$upscope $end
$upscope $end
$scope module main $end
$var wire 3 K tipo [2:0] $end
$var wire 5 L rs2 [4:0] $end
$var wire 5 M rs1 [4:0] $end
$var wire 1 ' regiwrite $end
$var wire 32 N reddataM [31:0] $end
$var wire 32 O readdata2R [31:0] $end
$var wire 32 P readdata1R [31:0] $end
$var wire 5 Q rd [4:0] $end
$var wire 1 R pcsrc $end
$var wire 7 S opcode [6:0] $end
$var wire 1 T memwrite $end
$var wire 1 ( memtoreg $end
$var wire 1 U memread $end
$var wire 32 V instrucao [31:0] $end
$var wire 12 W immediate [11:0] $end
$var wire 7 X funct7 [6:0] $end
$var wire 3 Y funct3 [2:0] $end
$var wire 1 " clk $end
$var wire 1 Z branch $end
$var wire 1 [ alusrc $end
$var wire 32 \ aluresult2 [31:0] $end
$var wire 32 ] aluresult1 [31:0] $end
$var wire 4 ^ alucontrol [3:0] $end
$var wire 32 _ PC [31:0] $end
$var reg 3 ` estado [2:0] $end
$scope module alu $end
$var wire 32 a readdata2R [31:0] $end
$var wire 32 b readdata1R [31:0] $end
$var wire 12 c immediate [11:0] $end
$var wire 1 " clk $end
$var wire 1 Z branch $end
$var wire 1 [ alusrc $end
$var wire 4 d alucontrol [3:0] $end
$var reg 32 e aluresult1 [31:0] $end
$var reg 32 f aluresult2 [31:0] $end
$var reg 1 R pcsrc $end
$upscope $end
$scope module clock $end
$var reg 1 " clk $end
$upscope $end
$scope module decodificacao $end
$var wire 1 " clk $end
$var wire 32 g instrucao [31:0] $end
$var reg 3 h funct3 [2:0] $end
$var reg 7 i funct7 [6:0] $end
$var reg 12 j immediate [11:0] $end
$var reg 7 k opcode [6:0] $end
$var reg 5 l rd [4:0] $end
$var reg 5 m rs1 [4:0] $end
$var reg 5 n rs2 [4:0] $end
$var reg 3 o tipo [2:0] $end
$upscope $end
$scope module lerinstrucao $end
$var wire 1 " clk $end
$var wire 32 p PC [31:0] $end
$var reg 32 q instrucao [31:0] $end
$upscope $end
$scope module memoria $end
$var wire 32 r aluresult2 [31:0] $end
$var wire 1 " clk $end
$var wire 12 s immediate [11:0] $end
$var wire 5 t rs2 [4:0] $end
$var wire 1 T memwrite $end
$var wire 1 U memread $end
$var reg 32 u immediateaux [31:0] $end
$var reg 32 v reddataM [31:0] $end
$upscope $end
$scope module registradores $end
$upscope $end
$scope module sinaisdecontrole $end
$var wire 1 " clk $end
$var wire 3 w funct3 [2:0] $end
$var wire 3 x tipo [2:0] $end
$var reg 4 y alucontrol [3:0] $end
$var reg 2 z aluop [1:0] $end
$var reg 1 [ alusrc $end
$var reg 1 Z branch $end
$var reg 1 U memread $end
$var reg 1 ( memtoreg $end
$var reg 1 T memwrite $end
$var reg 1 ' regiwrite $end
$upscope $end
$scope module somapc $end
$var wire 1 " clk $end
$var wire 12 { immediate [11:0] $end
$var wire 1 R pcsrc $end
$var reg 32 | PC [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
b0 p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
b0 `
b0 _
bx ^
bx ]
bx \
x[
xZ
bx Y
bx X
bx W
bx V
xU
xT
bx S
xR
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
x(
x'
bx &
bx %
bx $
bx #
0"
bx !
$end
#1
b1 _
b1 p
b1 |
b10000000010000010000011 V
b10000000010000010000011 g
b10000000010000010000011 q
b1 `
1"
#3
0"
#5
b0 `
b11 S
b11 k
b1000000100110011 V
b1000000100110011 g
b1000000100110011 q
b10 _
b10 p
b10 |
1"
#7
0"
#9
b11 _
b11 p
b11 |
b1000001000000010110011 V
b1000001000000010110011 g
b1000001000000010110011 q
b0 K
b0 o
b0 x
b0 W
b0 c
b0 j
b0 s
b0 {
b0 Y
b0 h
b0 w
b1 %
b1 M
b1 m
b10 #
b10 Q
b10 l
b110011 S
b110011 k
b1 `
1"
#11
0"
#13
b0 `
b0 u
b111 )
b111 P
b111 b
1[
1(
0Z
b10 ^
b10 d
b10 y
1U
0T
1'
b11 K
b11 o
b11 x
b1 #
b1 Q
b1 l
b10 &
b10 L
b10 n
b10 t
b0 X
b0 i
b100 _
b100 p
b100 |
1"
#15
0"
#17
b101 _
b101 p
b101 |
b1000000001000001000000010110011 V
b1000000001000001000000010110011 g
b1000000001000001000000010110011 q
0[
0(
b110 ^
b110 d
b110 y
0U
b0 *
b0 O
b0 a
0R
b0 ]
b0 e
b111 !
b111 \
b111 f
b111 r
b1 `
1"
#19
0"
#21
b0 `
bx )
bx P
bx b
b100000 X
b100000 i
b110 _
b110 p
b110 |
1"
#23
0"
#25
b111 _
b111 p
b111 |
b1000001000011001100011 V
b1000001000011001100011 g
b1000001000011001100011 q
b111 )
b111 P
b111 b
bx !
bx \
bx f
bx r
b1 `
1"
#27
0"
#29
b110 `
b111 !
b111 \
b111 f
b111 r
b1100 #
b1100 Q
b1100 l
b0 X
b0 i
b1100011 S
b1100011 k
b100001000000010110011 V
b100001000000010110011 g
b100001000000010110011 q
b1000 _
b1000 p
b1000 |
1"
#31
0"
#33
b1001 _
b1001 p
b1001 |
b100000010000000100011 V
b100000010000000100011 g
b100000010000000100011 q
b110 K
b110 o
b110 x
b1 &
b1 L
b1 n
b1 t
b1 W
b1 c
b1 j
b1 s
b1 {
b110011 S
b110011 k
bx )
bx P
bx b
1"
