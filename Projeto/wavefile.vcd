$date
	Sat Jun  3 07:24:53 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module main $end
$var wire 32 ! writedataR [31:0] $end
$var wire 3 " tipo [2:0] $end
$var wire 5 # rs2 [4:0] $end
$var wire 5 $ rs1 [4:0] $end
$var wire 1 % regiwrite $end
$var wire 32 & reg9 [31:0] $end
$var wire 32 ' reg8 [31:0] $end
$var wire 32 ( reg7 [31:0] $end
$var wire 32 ) reg6 [31:0] $end
$var wire 32 * reg5 [31:0] $end
$var wire 32 + reg4 [31:0] $end
$var wire 32 , reg31 [31:0] $end
$var wire 32 - reg30 [31:0] $end
$var wire 32 . reg3 [31:0] $end
$var wire 32 / reg29 [31:0] $end
$var wire 32 0 reg28 [31:0] $end
$var wire 32 1 reg27 [31:0] $end
$var wire 32 2 reg26 [31:0] $end
$var wire 32 3 reg25 [31:0] $end
$var wire 32 4 reg24 [31:0] $end
$var wire 32 5 reg23 [31:0] $end
$var wire 32 6 reg22 [31:0] $end
$var wire 32 7 reg21 [31:0] $end
$var wire 32 8 reg20 [31:0] $end
$var wire 32 9 reg2 [31:0] $end
$var wire 32 : reg19 [31:0] $end
$var wire 32 ; reg18 [31:0] $end
$var wire 32 < reg17 [31:0] $end
$var wire 32 = reg16 [31:0] $end
$var wire 32 > reg15 [31:0] $end
$var wire 32 ? reg14 [31:0] $end
$var wire 32 @ reg13 [31:0] $end
$var wire 32 A reg12 [31:0] $end
$var wire 32 B reg11 [31:0] $end
$var wire 32 C reg10 [31:0] $end
$var wire 32 D reg1 [31:0] $end
$var wire 32 E reg0 [31:0] $end
$var wire 32 F reddataM [31:0] $end
$var wire 32 G readdata2R [31:0] $end
$var wire 32 H readdata1R [31:0] $end
$var wire 5 I rd [4:0] $end
$var wire 1 J pcsrc $end
$var wire 7 K opcode [6:0] $end
$var wire 1 L negativo $end
$var wire 1 M memwrite $end
$var wire 1 N memtoreg $end
$var wire 1 O memread $end
$var wire 32 P mem9 [31:0] $end
$var wire 32 Q mem8 [31:0] $end
$var wire 32 R mem7 [31:0] $end
$var wire 32 S mem6 [31:0] $end
$var wire 32 T mem5 [31:0] $end
$var wire 32 U mem4 [31:0] $end
$var wire 32 V mem31 [31:0] $end
$var wire 32 W mem30 [31:0] $end
$var wire 32 X mem3 [31:0] $end
$var wire 32 Y mem29 [31:0] $end
$var wire 32 Z mem28 [31:0] $end
$var wire 32 [ mem27 [31:0] $end
$var wire 32 \ mem26 [31:0] $end
$var wire 32 ] mem25 [31:0] $end
$var wire 32 ^ mem24 [31:0] $end
$var wire 32 _ mem23 [31:0] $end
$var wire 32 ` mem22 [31:0] $end
$var wire 32 a mem21 [31:0] $end
$var wire 32 b mem20 [31:0] $end
$var wire 32 c mem2 [31:0] $end
$var wire 32 d mem19 [31:0] $end
$var wire 32 e mem18 [31:0] $end
$var wire 32 f mem17 [31:0] $end
$var wire 32 g mem16 [31:0] $end
$var wire 32 h mem15 [31:0] $end
$var wire 32 i mem14 [31:0] $end
$var wire 32 j mem13 [31:0] $end
$var wire 32 k mem12 [31:0] $end
$var wire 32 l mem11 [31:0] $end
$var wire 32 m mem10 [31:0] $end
$var wire 32 n mem1 [31:0] $end
$var wire 32 o mem0 [31:0] $end
$var wire 32 p instrucao [31:0] $end
$var wire 12 q immediate [11:0] $end
$var wire 7 r funct7 [6:0] $end
$var wire 3 s funct3 [2:0] $end
$var wire 1 t clk $end
$var wire 1 u branch $end
$var wire 1 v alusrc $end
$var wire 32 w aluresult2 [31:0] $end
$var wire 1 x aluresult1 $end
$var wire 4 y alucontrol [3:0] $end
$var wire 32 z PC [31:0] $end
$var reg 4 { estado [3:0] $end
$scope module alu $end
$var wire 4 | estado [3:0] $end
$var wire 1 J pcsrc $end
$var wire 32 } readdata2R [31:0] $end
$var wire 32 ~ readdata1R [31:0] $end
$var wire 1 L negativo $end
$var wire 12 !" immediate [11:0] $end
$var wire 1 t clk $end
$var wire 1 u branch $end
$var wire 1 v alusrc $end
$var wire 4 "" alucontrol [3:0] $end
$var reg 1 x aluresult1 $end
$var reg 32 #" aluresult2 [31:0] $end
$upscope $end
$scope module clock $end
$var reg 1 t clk $end
$upscope $end
$scope module decodificacao $end
$var wire 1 t clk $end
$var wire 4 $" estado [3:0] $end
$var wire 32 %" instrucao [31:0] $end
$var reg 3 &" funct3 [2:0] $end
$var reg 7 '" funct7 [6:0] $end
$var reg 12 (" immediate [11:0] $end
$var reg 1 L negativo $end
$var reg 7 )" opcode [6:0] $end
$var reg 5 *" rd [4:0] $end
$var reg 5 +" rs1 [4:0] $end
$var reg 5 ," rs2 [4:0] $end
$var reg 3 -" tipo [2:0] $end
$upscope $end
$scope module lerinstrucao $end
$var wire 1 t clk $end
$var wire 4 ." estado [3:0] $end
$var wire 32 /" PC [31:0] $end
$var reg 32 0" instrucao [31:0] $end
$upscope $end
$scope module memoria $end
$var wire 32 1" aluresult2 [31:0] $end
$var wire 1 t clk $end
$var wire 4 2" estado [3:0] $end
$var wire 12 3" immediate [11:0] $end
$var wire 32 4" readdata2R [31:0] $end
$var wire 1 M memwrite $end
$var wire 1 O memread $end
$var reg 32 5" mem0 [31:0] $end
$var reg 32 6" mem1 [31:0] $end
$var reg 32 7" mem10 [31:0] $end
$var reg 32 8" mem11 [31:0] $end
$var reg 32 9" mem12 [31:0] $end
$var reg 32 :" mem13 [31:0] $end
$var reg 32 ;" mem14 [31:0] $end
$var reg 32 <" mem15 [31:0] $end
$var reg 32 =" mem16 [31:0] $end
$var reg 32 >" mem17 [31:0] $end
$var reg 32 ?" mem18 [31:0] $end
$var reg 32 @" mem19 [31:0] $end
$var reg 32 A" mem2 [31:0] $end
$var reg 32 B" mem20 [31:0] $end
$var reg 32 C" mem21 [31:0] $end
$var reg 32 D" mem22 [31:0] $end
$var reg 32 E" mem23 [31:0] $end
$var reg 32 F" mem24 [31:0] $end
$var reg 32 G" mem25 [31:0] $end
$var reg 32 H" mem26 [31:0] $end
$var reg 32 I" mem27 [31:0] $end
$var reg 32 J" mem28 [31:0] $end
$var reg 32 K" mem29 [31:0] $end
$var reg 32 L" mem3 [31:0] $end
$var reg 32 M" mem30 [31:0] $end
$var reg 32 N" mem31 [31:0] $end
$var reg 32 O" mem4 [31:0] $end
$var reg 32 P" mem5 [31:0] $end
$var reg 32 Q" mem6 [31:0] $end
$var reg 32 R" mem7 [31:0] $end
$var reg 32 S" mem8 [31:0] $end
$var reg 32 T" mem9 [31:0] $end
$var reg 32 U" reddataM [31:0] $end
$var reg 32 V" writedataR [31:0] $end
$upscope $end
$scope module registradores $end
$var wire 1 t clk $end
$var wire 4 W" estado [3:0] $end
$var wire 5 X" rd [4:0] $end
$var wire 32 Y" readdata1R [31:0] $end
$var wire 32 Z" readdata2R [31:0] $end
$var wire 32 [" reddataM [31:0] $end
$var wire 5 \" rs1 [4:0] $end
$var wire 5 ]" rs2 [4:0] $end
$var wire 32 ^" writedataR [31:0] $end
$var wire 1 % regiwrite $end
$var wire 1 N memtoreg $end
$var reg 32 _" reg0 [31:0] $end
$var reg 32 `" reg1 [31:0] $end
$var reg 32 a" reg10 [31:0] $end
$var reg 32 b" reg11 [31:0] $end
$var reg 32 c" reg12 [31:0] $end
$var reg 32 d" reg13 [31:0] $end
$var reg 32 e" reg14 [31:0] $end
$var reg 32 f" reg15 [31:0] $end
$var reg 32 g" reg16 [31:0] $end
$var reg 32 h" reg17 [31:0] $end
$var reg 32 i" reg18 [31:0] $end
$var reg 32 j" reg19 [31:0] $end
$var reg 32 k" reg2 [31:0] $end
$var reg 32 l" reg20 [31:0] $end
$var reg 32 m" reg21 [31:0] $end
$var reg 32 n" reg22 [31:0] $end
$var reg 32 o" reg23 [31:0] $end
$var reg 32 p" reg24 [31:0] $end
$var reg 32 q" reg25 [31:0] $end
$var reg 32 r" reg26 [31:0] $end
$var reg 32 s" reg27 [31:0] $end
$var reg 32 t" reg28 [31:0] $end
$var reg 32 u" reg29 [31:0] $end
$var reg 32 v" reg3 [31:0] $end
$var reg 32 w" reg30 [31:0] $end
$var reg 32 x" reg31 [31:0] $end
$var reg 32 y" reg4 [31:0] $end
$var reg 32 z" reg5 [31:0] $end
$var reg 32 {" reg6 [31:0] $end
$var reg 32 |" reg7 [31:0] $end
$var reg 32 }" reg8 [31:0] $end
$var reg 32 ~" reg9 [31:0] $end
$upscope $end
$scope module sinaisdecontrole $end
$var wire 1 t clk $end
$var wire 4 !# estado [3:0] $end
$var wire 3 "# funct3 [2:0] $end
$var wire 7 ## funct7 [6:0] $end
$var wire 3 $# tipo [2:0] $end
$var reg 4 %# alucontrol [3:0] $end
$var reg 2 &# aluop [1:0] $end
$var reg 1 v alusrc $end
$var reg 1 u branch $end
$var reg 1 O memread $end
$var reg 1 N memtoreg $end
$var reg 1 M memwrite $end
$var reg 1 % regiwrite $end
$upscope $end
$scope module somapc $end
$var wire 1 t clk $end
$var wire 4 '# estado [3:0] $end
$var wire 12 (# immediate [11:0] $end
$var wire 1 L negativo $end
$var wire 1 J pcsrc $end
$var reg 32 )# PC [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 )#
bx (#
b0 '#
bx &#
bx %#
bx $#
bx ##
bx "#
b0 !#
b0 ~"
b111111111111 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b111 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
b0 W"
bx V"
bx U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b100 6"
b10 5"
bx 4"
bx 3"
b0 2"
bx 1"
bx 0"
b0 /"
b0 ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
b0 $"
bx #"
bx ""
bx !"
bx ~
bx }
b0 |
b0 {
b0 z
bx y
xx
bx w
xv
xu
0t
bx s
bx r
bx q
bx p
b10 o
b100 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
xO
xN
xM
xL
bx K
xJ
bx I
bx H
bx G
bx F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b111 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b111111111111 '
b0 &
x%
bx $
bx #
bx "
bx !
$end
#1
b1 {
b1 |
b1 $"
b1 ."
b1 2"
b1 W"
b1 !#
b1 '#
1t
#3
0t
#5
b1001 {
b1001 |
b1001 $"
b1001 ."
b1001 2"
b1001 W"
b1001 !#
b1001 '#
1t
#7
0t
#9
1t
